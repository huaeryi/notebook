{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-huayis-notebook","title":"Welcome to Huayi's Notebook","text":"<ul> <li>\u8fd9\u4e2a\u7b14\u8bb0\u7ad9\u70b9\u76ee\u524d\u4e3b\u8981\u8bb0\u5f55\u7684\u662f\u6211\u5728\u5b66\u4e60\u7b97\u6cd5\u65f6\u7684\u7ec3\u4e60\u5f52\u7eb3\uff0c\u53c2\u8003\u7f51\u7ad9\u6709\u6d1b\u8c37\uff0cOI Wiki\u7b49</li> </ul>"},{"location":"other/","title":"\u5c0f\u9879","text":""},{"location":"other/#_1","title":"\u9ad8\u7cbe\u5ea6","text":"<ul> <li>\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u5229\u7528\u5b57\u7b26\u4e32\u548c\u7ad6\u5f0f\u52a0\u51cf\u6cd5\u5b9e\u73b0\u5927\u6574\u6570\u7684\u56db\u5219\u8fd0\u7b97</li> </ul> C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstatic const int LEN = 1004;\nint a[LEN], b[LEN], c[LEN];\nvoid clear(int a[])\n{\nfor (int i = 0; i &lt; LEN; i++) {\na[i] = 0;\n}\n}\nvoid read(int a[])\n{\nstatic char s[LEN + 1];\nscanf(\"%s\", s);\nclear(a);\nint len = strlen(s);\nfor (int i = 0; i &lt; len; i++) {\na[len - i - 1] = s[i] - '0';\n}\n}\nvoid print(int a[])\n{\nint i;\nfor (i = LEN - 1; i &gt;= 1; i--) {\nif (a[i] != 0) {\nbreak;\n}\n}\nfor (; i &gt;= 0; i--) {\nputchar(a[i] + '0');\n}\nputchar('\\n');\n}\nvoid add(int a[], int b[], int c[])\n{\nclear(c);\nfor (int i = 0; i &lt; LEN - 1; i++) {\nc[i] += a[i] + b[i];\nif (c[i] &gt;= 10) {\nc[i + 1] += 1;\nc[i] -= 10;\n}\n}\n}\nvoid sub(int a[], int b[], int c[]) {\nclear(c);\nfor (int i = 0; i &lt; LEN - 1; ++i) {\nc[i] += a[i] - b[i];\nif (c[i] &lt; 0) {\nc[i + 1] -= 1;\nc[i] += 10;\n}\n}\n}\nint main()\n{\nread(a);\nread(b);\nadd(a, b, c);\nprint(c);\nreturn 0;\n}\n</code></pre>"},{"location":"other/#_2","title":"\u5feb\u901f\u5e42","text":"<ul> <li>\u5feb\u901f\u5e42\u662f\u4ee5\\(\\Theta(log \\space n)\\)\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u9ad8\u6b21\u5e42\u7684\u5c0f\u6280\u5de7</li> </ul> C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n//\u9012\u5f52\nlong long binpow(long long a, long long b)\n{\nif (b == 0) {\nreturn 1;\n}\nlong long res = binpow(a, b / 2);\nif (b % 2) {\nreturn res * res * a;\n} else {\nreturn res * res;\n}\n}\n//\u975e\u9012\u5f52\nlong long binpow(long long a, long long b)\n{\nlong long res = 1;\nwhile (b &gt; 0) {\nif (b &amp; 1) res = res * a;\na = a * a;\nb &gt;&gt;= 1;\n}\nreturn res;\n}\n</code></pre>"},{"location":"other/#gcdlcm","title":"gcd\u548clcm","text":"<ul> <li>\u6700\u5927\u516c\u7ea6\u6570\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5</li> </ul> C++ <pre><code>int gcd(int a, int b) {\nif (b == 0) return a;\nreturn gcd(b, a % b);\n}\nint lcm(int a, int b) {\nreturn a * b / gcd(a, b);\n}\n</code></pre> <ul> <li>\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5</li> </ul>"},{"location":"other/#_3","title":"\u79bb\u6563\u5316","text":"<ul> <li>\u5c06\u4e0d\u597d\u7528\u4f5c\u4e0b\u6807\u7684\u6570\u7ec4\u6570\u636e\u6839\u636e\u5143\u7d20\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\u54c8\u5e0c\uff0c\u4ece\u800c\u5f97\u5230\u79bb\u6563\u5316\u6570\u7ec4\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u67d0\u4e9b\u590d\u6742\u95ee\u9898\u7684\u9884\u5904\u7406</li> </ul> C++ <pre><code>// arr[i] \u4e3a\u521d\u59cb\u6570\u7ec4,\u4e0b\u6807\u8303\u56f4\u4e3a [1, n]\nfor (int i = 1; i &lt;= n; ++i)  tmp[i] = arr[i];\nstd::sort(tmp + 1, tmp + n + 1);                        int len = std::unique(tmp + 1, tmp + n + 1) - (tmp + 1);\nfor (int i = 1; i &lt;= n; ++i)                              arr[i] = std::lower_bound(tmp + 1, tmp + len + 1, arr[i]) - tmp;\n</code></pre>"},{"location":"stl/","title":"\u5e38\u7528stl\u5e93","text":""},{"location":"stl/#sort","title":"\u6392\u5e8f <code>sort</code>","text":"C++ <pre><code>int nums[100];\n//\u5b9a\u4e49\u4e0d\u540c\u7684cmp\u51fd\u6570\u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7684\u6392\u5e8f\nbool cmp(int &amp;a, int &amp;b) {\nreturn a &lt; b;\n}\nsort(nums, nums + n, cmp);\n</code></pre>"},{"location":"stl/#lower_bound-upper_bound","title":"\u4e8c\u5206\u67e5\u627e <code>lower_bound()</code> <code>upper_bound()</code>","text":"C++ <pre><code>#include &lt;algorithm&gt;\n//\u53d6\u5f97\u6700\u5c0f\u7684\u4e0b\u6807i\u4f7f a[i] &gt;= x\nlower_bound(a,a+n,x)-a      //\u4e0b\u6807\u4ece0\u5f00\u59cb\nlower_bound(a+1,a+n+1,x)-a  //\u4e0b\u6807\u4ece1\u5f00\u59cb\n//\u53d6\u5f97\u6700\u5c0f\u7684\u4e0b\u6807i\u4f7f a[i] &gt; x\nupper_bound(a,a+n,x)-a      //\u4e0b\u6807\u4ece0\u5f00\u59cb\nupper_bound(a+1,a+n+1,x)-a  //\u4e0b\u6807\u4ece1\u5f00\u59cb\n</code></pre> <ul> <li>\u53ef\u4ee5\u5bf9\u6bd4\u4e24\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u82e5\u4e0d\u540c\u5219\u627e\u5230\u4e86a[i] == x\uff0c\u5dee\u503c\u5373\u4e3ax\u7684\u4e2a\u6570</li> </ul>"},{"location":"stl/#set-map","title":"set &amp; map","text":"C++ <pre><code>set&lt;int&gt; st;\nfor (auto i : st) {\ncout &lt;&lt; *it &lt;&lt; endl;\n}\nmap&lt;string, int&gt; mp;\nfor (auto it = mp.begin(); it != mp.end(); it++) {\ncout &lt;&lt; it-&gt;first &lt;&lt; endl;\ncout &lt;&lt; it-&gt;second &lt;&lt; endl;\n}\n</code></pre>"},{"location":"dp/dp_pack/","title":"\u80cc\u5305dp","text":""},{"location":"dp/dp_pack/#0-1","title":"0-1\u80cc\u5305","text":"<ul> <li>0-1\u80cc\u5305\u6307\u7684\u662f\u5bb9\u91cf\u4e3aW\u7684\u80cc\u5305\uff0c\u91cd\u91cfw[i]\u4e14\u4ef7\u503cv[i]\u7684\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ea\u6709\u4e24\u79cd\u72b6\u6001\uff0c\u53d6\u6216\u4e0d\u53d6\uff0c\u600e\u6837\u653e\u5165\u80cc\u5305\u4f7f\u80cc\u5305\u4e2d\u7684\u7269\u54c1\u4ef7\u503c\u6700\u5927\u3002</li> <li>\u4e8c\u7ef4\u6570\u7ec4\u89e3\u6cd5\uff0c\u5185\u5b58\u8fc7\u5927</li> </ul> C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint w[1001];\nint v[1001];\nint dp[101][1001];\nint main()\n{\nint W, N;\ncin &gt;&gt; W &gt;&gt; N;\nfor (int i = 1; i &lt;= N; i++) {\ncin &gt;&gt; w[i] &gt;&gt; v[i];\n}\nfor (int i = 0; i &lt;= N; i++) {\ndp[i][0] = 0;\n}\nfor (int i = 1; i &lt;= N; i++) {\nfor (int j = 1; j &lt;= W; j++) {\nif (j &lt; w[i]) {\ndp[i][j] = dp[i - 1][j];\n} else {\ndp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i]);        }\n}\n}\ncout &lt;&lt; dp[N][W];\nreturn 0;\n}\n</code></pre> <ul> <li>\u4e00\u7ef4\u6570\u7ec4\u89e3\u6cd5</li> </ul> C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint w[1001];\nint v[1001];\nint dp[1001];\nint main()\n{\ndp[0] = 0;\nint W, N;\ncin &gt;&gt; W &gt;&gt; N;\nfor (int i = 1; i &lt;= N; i++) {\ncin &gt;&gt; w[i] &gt;&gt; v[i];\n}\nfor (int i = 0; i &lt;= N; i++) {\nfor (int j = W; j &gt;= w[i]; j--) {\nif (j - w[i] &gt;= 0) {\ndp[j] = max(dp[j], dp[j - w[i]] + v[i]);\n}\n}\n}\ncout &lt;&lt; dp[W];\nreturn 0;\n}\n</code></pre> <ul> <li>P1048 \u91c7\u836f</li> </ul>"},{"location":"dp/dp_pack/#_1","title":"\u5b8c\u5168\u80cc\u5305","text":"<ul> <li>\u572801\u80cc\u5305\u7684\u57fa\u7840\u4e0a\uff0c\u6bcf\u4e2a\u7269\u54c1\u90fd\u53ef\u4ee5\u53d6\u4efb\u610f\u6570\u91cf</li> </ul> C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nlong long w[10001];\nlong long v[10001];\nlong long dp[10000001];\nint main()\n{\nlong long W, n;\ncin &gt;&gt; W &gt;&gt; n;\ndp[0] = 0;\nfor (int i = 1; i &lt;= n; i++) {\ncin &gt;&gt; w[i] &gt;&gt; v[i];\n}\nfor (int i = 1; i &lt;= n; i++) {\nfor (int j = w[i]; j &lt;= W; j++) {\ndp[j] = max(dp[j], dp[j - w[i]] + v[i]);\n}\n}\ncout &lt;&lt; dp[W];\nreturn 0;\n}\n</code></pre> <ul> <li>P1616 \u75af\u72c2\u7684\u91c7\u836f</li> </ul>"},{"location":"ds/ds_disjoint/","title":"\u5e76\u67e5\u96c6","text":"<ul> <li>\u5e76\u67e5\u96c6\u7684\u5b9e\u73b0\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b91-n\u521a\u5f00\u59cb\u90fd\u662f\u72ec\u7acb\u7684\u6811\u7684\u6839\u8282\u70b9\uff0c\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u7236\u8282\u70b9\u6570\u7ec4\u6765\u4f53\u73b0\u54ea\u4e9b\u8282\u70b9\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u5e26\u6709find\u548cunite\u64cd\u4f5c\u7684\u5e76\u67e5\u96c6\u5b9e\u73b0\u5982\u4e0b</li> </ul> disjoint C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nstruct dsu\n{\nvector&lt;size_t&gt; pa;\nexplicit dsu(size_t size) : pa(size) {\niota(pa.begin(), pa.end(), 0);\n}\nsize_t dsu::find(size_t x)\n{\nreturn pa[x] == x ? x : pa[x] = find(pa[x]);\n}\nvoid dsu::unite(size_t x, size_t y)\n{\npa[find(x)] = find(y);\n}\n};\n</code></pre>"},{"location":"ds/segment_tree/","title":"\u7ebf\u6bb5\u6811","text":"<ul> <li>\u7ebf\u6bb5\u6811\u662f\u7528\u4e8e\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6db5\u76d6\u6811\u72b6\u6570\u7ec4\u7684\u529f\u80fd</li> </ul>"},{"location":"ds/segment_tree/#_1","title":"\u6784\u5efa\u7ebf\u6bb5\u6811","text":"build C++ <pre><code>void build(int s, int t, int p) {\n// \u5bf9 [s,t] \u533a\u95f4\u5efa\u7acb\u7ebf\u6bb5\u6811,\u5f53\u524d\u6839\u7684\u7f16\u53f7\u4e3a p\nif (s == t) {\nd[p] = a[s];\nreturn;\n}\nint m = s + ((t - s) &gt;&gt; 1);\n// \u79fb\u4f4d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u52a0\u51cf\u6cd5\uff0c\u6240\u4ee5\u52a0\u4e0a\u62ec\u53f7\n// \u5982\u679c\u5199\u6210 (s + t) &gt;&gt; 1 \u53ef\u80fd\u4f1a\u8d85\u51fa int \u8303\u56f4\nbuild(s, m, p * 2), build(m + 1, t, p * 2 + 1);\n// \u9012\u5f52\u5bf9\u5de6\u53f3\u533a\u95f4\u5efa\u6811\nd[p] = d[p * 2] + d[(p * 2) + 1];\n}\n</code></pre>"},{"location":"ds/segment_tree/#_2","title":"\u533a\u95f4\u67e5\u8be2","text":"getsum C++ <pre><code>int getsum(int l, int r, int s, int t, int p) {\n// [l, r] \u4e3a\u67e5\u8be2\u533a\u95f4, [s, t] \u4e3a\u5f53\u524d\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4, p \u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7f16\u53f7\nif (l &lt;= s &amp;&amp; t &lt;= r)\nreturn d[p];  // \u5f53\u524d\u533a\u95f4\u4e3a\u8be2\u95ee\u533a\u95f4\u7684\u5b50\u96c6\u65f6\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u548c\nint m = s + ((t - s) &gt;&gt; 1), sum = 0;\nif (l &lt;= m) sum += getsum(l, r, s, m, p * 2);\n// \u5982\u679c\u5de6\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4 [s, m] \u4e0e\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6, \u5219\u9012\u5f52\u67e5\u8be2\u5de6\u513f\u5b50\nif (r &gt; m) sum += getsum(l, r, m + 1, t, p * 2 + 1);\n// \u5982\u679c\u53f3\u513f\u5b50\u4ee3\u8868\u7684\u533a\u95f4 [m + 1, t] \u4e0e\u8be2\u95ee\u533a\u95f4\u6709\u4ea4\u96c6, \u5219\u9012\u5f52\u67e5\u8be2\u53f3\u513f\u5b50\nreturn sum;\n}\n</code></pre>"},{"location":"ds/segment_tree/#_3","title":"\u533a\u95f4\u4fee\u6539","text":""},{"location":"ds/tree_array/","title":"\u6811\u72b6\u6570\u7ec4","text":""},{"location":"ds/tree_array/#_1","title":"\u7ba1\u8f96\u8303\u56f4","text":"<ul> <li><code>lowbit</code> \u88ab\u5b9a\u4e49\u4e3ax\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d1\u4e0e\u540e\u97620\u7ec4\u6210\u7684\u6570</li> </ul> lowbit C++ <pre><code>int lowbit(int x) {\n// x \u7684\u4e8c\u8fdb\u5236\u4e2d\uff0c\u6700\u4f4e\u4f4d\u7684 1 \u4ee5\u53ca\u540e\u9762\u6240\u6709 0 \u7ec4\u6210\u7684\u6570\u3002\n// lowbit(0b01011000) == 0b00001000\n//          ~~~~^~~~\n// lowbit(0b01110010) == 0b00000010\n//          ~~~~~~^~\nreturn x &amp; -x;\n}\n</code></pre> <ul> <li>c[x]\u7ba1\u8f96\u7684\u6570\u7ec4\u8303\u56f4\u662f[x - lowbit + 1, x]\u7684\u533a\u95f4\u548c</li> </ul>"},{"location":"ds/tree_array/#_2","title":"\u533a\u95f4\u67e5\u8be2","text":"<ul> <li>\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u524d\u7f00\u548c\u4e0e\u5dee\u5206\uff0c\u5feb\u901f\u67e5\u8be2\u533a\u95f4\u4fe1\u606f</li> </ul> getsum C++ <pre><code>int getsum(int x) {  // a[1]..a[x]\u7684\u548c\nint ans = 0;\nwhile (x &gt; 0) {\nans = ans + c[x];\nx = x - lowbit(x);\n}\nreturn ans;\n}\n</code></pre>"},{"location":"ds/tree_array/#_3","title":"\u5355\u70b9\u52a0","text":"<ul> <li>\u6211\u4eec\u9700\u8981\u4fee\u6539\u6240\u6709\u542b\u6709a[x]\u7684c[y],\u5c06\u5176\u52a0\u4e0ak</li> </ul> add C++ <pre><code>void add(int x, int k) {\nwhile (x &lt;= n) {  // \u4e0d\u80fd\u8d8a\u754c\nc[x] = c[x] + k;\nx = x + lowbit(x);\n}\n}\n</code></pre>"},{"location":"search/dfs/","title":"\u641c\u7d22","text":""},{"location":"search/dfs/#dfs","title":"dfs","text":"<ul> <li>dfs\u7684\u5e38\u7528\u65b9\u6cd5\u5728\u4e8e\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4\uff0c\u5bf9\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u6807\u8bb0\u5904\u7406\uff0c\u5229\u7528\u9012\u5f52\u641c\u7d22\uff0c\u56de\u6eaf\u540e\u6e05\u9664\u6807\u8bb0</li> </ul>"},{"location":"search/dfs/#bfs","title":"bfs","text":""}]}